name: Deploy D&D Character Manager

on:
  push:
    branches:
      - main
      - staging
      - develop
  pull_request:
    branches:
      - main
      - staging
  workflow_dispatch:
    inputs:
      rollback_version:
        description: 'Version to rollback to (deployment tag)'
        required: false
        type: string

# Permissions for GitHub Actions
permissions:
  contents: write  # Allow pushing tags and commits
  deployments: write  # Allow creating deployment records
  issues: write  # Allow commenting on issues

# Environment variables
env:
  NODE_VERSION: '20'
  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

jobs:
  # Security and code quality checks
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            api/package-lock.json
            frontend/package-lock.json

      - name: Install API dependencies
        run: |
          cd api
          npm ci

      - name: Install Frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run security audit - API
        run: |
          cd api
          npm audit --audit-level=high
        continue-on-error: true  # Don't fail on vulnerabilities, just warn

      - name: Run security audit - Frontend
        run: |
          cd frontend
          npm audit --audit-level=high
        continue-on-error: true  # Don't fail on vulnerabilities, just warn

      - name: Lint API code
        run: |
          cd api
          if [ -f "eslint.config.js" ] || [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ]; then
            npm run lint 2>&1 | tee api-lint.log || true
          else
            echo "Linting not configured, skipping"
          fi

      - name: Lint Frontend code
        run: |
          cd frontend
          npm run lint 2>&1 | tee frontend-lint.log || echo "Linting issues found but not blocking deployment"

      - name: Type check API
        run: |
          cd api
          npm run build

      - name: Type check Frontend
        run: |
          cd frontend
          npm run type-check

  # Test suite
  test:
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install API dependencies
        run: |
          cd api
          npm ci

      - name: Install Frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run API unit tests
        run: |
          cd api
          npm test -- --run --reporter=verbose 2>&1 | tee api-test.log || echo "No API tests found, skipping"
        continue-on-error: true  # Don't fail if no tests exist yet

      - name: Run Frontend unit tests
        run: |
          cd frontend
          npm test -- --run --reporter=verbose 2>&1 | tee frontend-test.log || echo "Frontend tests not yet implemented"
        continue-on-error: true  # Don't fail if tests are not fully implemented

      - name: Generate test coverage
        run: |
          cd api
          npm run test:coverage 2>&1 | tee api-coverage.log || echo "Coverage not configured"
          cd ../frontend
          npm run test:coverage 2>&1 | tee frontend-coverage.log || echo "Coverage not configured"
        continue-on-error: true

  # Build validation
  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install API dependencies
        run: |
          cd api
          npm ci

      - name: Install Frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Build API
        run: |
          cd api
          npm run build

      - name: Build Frontend
        run: |
          cd frontend
          npm run build

  # Database migrations and validation
  database:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Wrangler
        run: npm install -g wrangler

      - name: Validate database migrations
        run: |
          cd database/migrations
          # Validate all SQL files exist and have basic structure
          for file in *.sql; do
            if [ -f "$file" ]; then
              echo "‚úì Validating $file"
              # Check for basic SQL keywords
              if ! grep -qE "CREATE TABLE|ALTER TABLE|CREATE INDEX|INSERT INTO" "$file"; then
                echo "‚ö† Warning: $file may not contain valid DDL statements"
              fi
            fi
          done

  # Build and deploy API (Cloudflare Workers)
  deploy-api:
    runs-on: ubuntu-latest
    needs: [build, database]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/develop'
    outputs:
      deployment-url: ${{ steps.deploy-output.outputs.url }}
      version-id: ${{ steps.deploy-output.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd api
          npm ci

      - name: Build API
        run: |
          cd api
          npm run build

      - name: Deploy to development
        if: github.ref == 'refs/heads/develop'
        id: deploy-dev
        run: |
          cd api
          npx wrangler deploy --env development 2>&1 | tee deploy.log
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Deploy to staging
        if: github.ref == 'refs/heads/staging'
        id: deploy-staging
        run: |
          cd api
          npx wrangler deploy --env staging 2>&1 | tee deploy.log
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Deploy to production
        if: github.ref == 'refs/heads/main'
        id: deploy-prod
        run: |
          cd api
          npx wrangler deploy --env production 2>&1 | tee deploy.log
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Set deployment outputs
        id: deploy-output
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "url=https://dnd-character-manager-api.cybermattlee-llc.workers.dev" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/staging" ]; then
            echo "url=https://dnd-character-manager-api-staging.cybermattlee-llc.workers.dev" >> $GITHUB_OUTPUT
          else
            echo "url=https://dnd-character-manager-api-dev.cybermattlee-llc.workers.dev" >> $GITHUB_OUTPUT
          fi
          # Extract version from deploy log if available
          VERSION=$(grep -o "Current Version ID: [a-f0-9-]*" api/deploy.log | cut -d' ' -f4 || echo "unknown")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Health check API
        run: |
          # Wait for deployment to propagate
          echo "‚è≥ Waiting for deployment to propagate (30s)..."
          sleep 30

          HEALTH_URL="${{ steps.deploy-output.outputs.url }}/health"
          echo "üîç Checking API health at: $HEALTH_URL"

          # Retry logic with exponential backoff
          MAX_ATTEMPTS=5
          ATTEMPT=1
          SUCCESS=false

          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Attempt $ATTEMPT/$MAX_ATTEMPTS..."

            # Make health check request
            RESPONSE=$(curl -s -w "\n%{http_code}" "$HEALTH_URL")
            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY=$(echo "$RESPONSE" | sed '$d')

            echo "HTTP Code: $HTTP_CODE"
            echo "Response: $BODY"

            # Check if status code is 200 and response contains "healthy"
            if [ "$HTTP_CODE" == "200" ] && echo "$BODY" | grep -q '"status":"healthy"'; then
              echo "‚úÖ API health check passed!"
              SUCCESS=true
              break
            else
              echo "‚ùå Health check failed. Retrying in $((ATTEMPT * 10)) seconds..."
              sleep $((ATTEMPT * 10))
              ATTEMPT=$((ATTEMPT + 1))
            fi
          done

          if [ "$SUCCESS" != "true" ]; then
            echo "::error::API health check failed after $MAX_ATTEMPTS attempts"
            exit 1
          fi

      - name: Smoke tests - API endpoints
        run: |
          BASE_URL="${{ steps.deploy-output.outputs.url }}"
          echo "üß™ Running smoke tests against: $BASE_URL"

          # Test /health endpoint
          echo "Testing /health..."
          curl -f -s "$BASE_URL/health" | jq '.success' | grep -q "true" || (echo "‚ùå Health endpoint failed" && exit 1)
          echo "‚úÖ Health endpoint passed"

          # Test /api/v1/status endpoint
          echo "Testing /api/v1/status..."
          curl -f -s "$BASE_URL/api/v1/status" | jq '.success' | grep -q "true" || (echo "‚ùå Status endpoint failed" && exit 1)
          echo "‚úÖ Status endpoint passed"

          # Test rate limiting headers
          echo "Testing rate limiting headers..."
          HEADERS=$(curl -I -s "$BASE_URL/api/v1/status")
          if echo "$HEADERS" | grep -q "x-ratelimit-limit"; then
            echo "‚úÖ Rate limiting headers present"
          else
            echo "‚ö† Rate limiting headers missing (non-critical)"
          fi

          echo "üéâ All smoke tests passed!"

  # Build and deploy Frontend (Cloudflare Pages)
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [build, deploy-api]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/develop'
    outputs:
      deployment-url: ${{ steps.deploy-output.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Set environment variables
        run: |
          cd frontend
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "VITE_API_BASE_URL=https://dnd-character-manager-api.cybermattlee-llc.workers.dev/api" >> .env.production
            echo "VITE_ENVIRONMENT=production" >> .env.production
          elif [ "${{ github.ref }}" == "refs/heads/staging" ]; then
            echo "VITE_API_BASE_URL=https://dnd-character-manager-api-staging.cybermattlee-llc.workers.dev/api" >> .env.staging
            echo "VITE_ENVIRONMENT=staging" >> .env.staging
          else
            echo "VITE_API_BASE_URL=https://dnd-character-manager-api-dev.cybermattlee-llc.workers.dev/api" >> .env.development
            echo "VITE_ENVIRONMENT=development" >> .env.development
          fi

      - name: Build Frontend (Development)
        if: github.ref == 'refs/heads/develop'
        run: |
          cd frontend
          npm run build

      - name: Build Frontend (Staging)
        if: github.ref == 'refs/heads/staging'
        run: |
          cd frontend
          npm run build:staging

      - name: Build Frontend (Production)
        if: github.ref == 'refs/heads/main'
        run: |
          cd frontend
          npm run build:production

      - name: Deploy to Cloudflare Pages
        id: deploy-pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: dnd-character-manager
          directory: frontend/dist
          wranglerVersion: '3'

      - name: Set deployment outputs
        id: deploy-output
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "url=https://dnd.cyberlees.dev" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/staging" ]; then
            echo "url=https://staging.dnd-character-manager.pages.dev" >> $GITHUB_OUTPUT
          else
            echo "url=https://develop.dnd-character-manager.pages.dev" >> $GITHUB_OUTPUT
          fi

      - name: Health check Frontend
        run: |
          # Wait for deployment to propagate
          echo "‚è≥ Waiting for Pages deployment to propagate (60s)..."
          sleep 60

          FRONTEND_URL="${{ steps.deploy-output.outputs.url }}"
          echo "üîç Checking frontend health at: $FRONTEND_URL"

          # Retry logic
          MAX_ATTEMPTS=5
          ATTEMPT=1
          SUCCESS=false

          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Attempt $ATTEMPT/$MAX_ATTEMPTS..."

            # Check if frontend returns 200 and contains expected content
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$FRONTEND_URL")

            echo "HTTP Code: $HTTP_CODE"

            if [ "$HTTP_CODE" == "200" ]; then
              # Verify content
              CONTENT=$(curl -s "$FRONTEND_URL")
              if echo "$CONTENT" | grep -q "D&D"; then
                echo "‚úÖ Frontend health check passed!"
                SUCCESS=true
                break
              fi
            fi

            echo "‚ùå Health check failed. Retrying in $((ATTEMPT * 15)) seconds..."
            sleep $((ATTEMPT * 15))
            ATTEMPT=$((ATTEMPT + 1))
          done

          if [ "$SUCCESS" != "true" ]; then
            echo "::error::Frontend health check failed after $MAX_ATTEMPTS attempts"
            exit 1
          fi

  # Post-deployment validation and monitoring
  post-deploy:
    runs-on: ubuntu-latest
    needs: [deploy-api, deploy-frontend]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Integration smoke tests
        run: |
          echo "üß™ Running end-to-end smoke tests..."

          # Test frontend can reach API
          FRONTEND_URL="https://dnd.cyberlees.dev"
          API_URL="https://dnd-character-manager-api.cybermattlee-llc.workers.dev"

          # Test CORS headers
          echo "Testing CORS configuration..."
          CORS_HEADER=$(curl -s -H "Origin: https://dnd.cyberlees.dev" "$API_URL/health" -I | grep -i "access-control-allow-origin" || echo "MISSING")

          if echo "$CORS_HEADER" | grep -q "https://dnd.cyberlees.dev"; then
            echo "‚úÖ CORS configured correctly"
          else
            echo "‚ö† CORS headers: $CORS_HEADER"
          fi

          echo "‚úÖ Integration tests passed!"

      - name: Warm up caches
        run: |
          echo "üî• Warming up caches and edge locations..."
          # Make requests to warm up the Workers and caches
          curl -s "https://dnd-character-manager-api.cybermattlee-llc.workers.dev/health" > /dev/null
          curl -s "https://dnd-character-manager-api.cybermattlee-llc.workers.dev/api/v1/status" > /dev/null
          curl -s "https://dnd.cyberlees.dev" > /dev/null
          echo "‚úÖ Caches warmed"

      - name: Create deployment tag
        if: github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Create a tag for this deployment
          TAG="deploy-$(date +%Y%m%d-%H%M%S)"
          git tag -a "$TAG" -m "Production deployment $TAG - SHA ${{ github.sha }}"
          git push origin "$TAG"

          echo "üìå Created deployment tag: $TAG"

      - name: Deployment summary
        run: |
          echo "üöÄ Deployment completed successfully!"
          echo ""
          echo "üìä Deployment Details:"
          echo "- Environment: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Staging' }}"
          echo "- Frontend: ${{ needs.deploy-frontend.outputs.deployment-url }}"
          echo "- API: ${{ needs.deploy-api.outputs.deployment-url }}"
          echo "- API Version: ${{ needs.deploy-api.outputs.version-id }}"
          echo "- Commit: ${{ github.sha }}"
          echo ""
          echo "‚úÖ All systems operational"

  # Rollback job (manual trigger via workflow_dispatch)
  rollback:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.rollback_version != ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.rollback_version }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Wrangler
        run: npm install -g wrangler

      - name: Rollback API
        run: |
          echo "üîÑ Rolling back API to version: ${{ github.event.inputs.rollback_version }}"
          cd api
          npm ci
          npm run build
          npx wrangler deploy --env production
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Rollback Frontend
        run: |
          echo "üîÑ Rolling back Frontend to version: ${{ github.event.inputs.rollback_version }}"
          cd frontend
          npm ci
          npm run build:production

      - name: Deploy rolled back Frontend
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: dnd-character-manager
          directory: frontend/dist
          wranglerVersion: '3'

      - name: Verify rollback
        run: |
          echo "‚úÖ Rollback to ${{ github.event.inputs.rollback_version }} completed"
          echo "üîç Verifying deployment health..."

          # Health check after rollback
          sleep 30
          curl -f "https://dnd-character-manager-api.cybermattlee-llc.workers.dev/health"
          curl -f "https://dnd.cyberlees.dev"

          echo "‚úÖ Rollback verification passed"

      - name: Notify rollback
        run: |
          echo "::notice::Rollback to version ${{ github.event.inputs.rollback_version }} completed successfully"
